// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vpn.proto

package vpn

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("vpn.proto", fileDescriptor_75c5922f473942e1) }

var fileDescriptor_75c5922f473942e1 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2b, 0xc8, 0xd3,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2b, 0xc8, 0x93, 0x12, 0x28, 0x2b, 0xc8, 0xd3,
	0x2d, 0x2e, 0x29, 0x2a, 0x4d, 0x2e, 0x81, 0x08, 0x1b, 0xa5, 0x70, 0x31, 0x87, 0x05, 0xf8, 0x09,
	0xe9, 0x72, 0xb1, 0x38, 0x96, 0x96, 0x64, 0x08, 0x09, 0xe8, 0x81, 0x74, 0x80, 0x98, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x82, 0x48, 0x22, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a,
	0x0c, 0x42, 0x7a, 0x5c, 0x1c, 0xae, 0x15, 0xc9, 0x19, 0x89, 0x79, 0xe9, 0xa9, 0x42, 0xbc, 0x60,
	0x05, 0x9e, 0x01, 0x01, 0x89, 0xc9, 0xd9, 0xa9, 0x25, 0x52, 0xa8, 0x5c, 0x25, 0x06, 0x0d, 0x46,
	0x03, 0xc6, 0x24, 0x36, 0xb0, 0x65, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xe3, 0x83,
	0x5b, 0x90, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VPNClient is the client API for VPN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VPNClient interface {
	// authentication
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// exchange packets
	Exchange(ctx context.Context, opts ...grpc.CallOption) (VPN_ExchangeClient, error)
}

type vPNClient struct {
	cc grpc.ClientConnInterface
}

func NewVPNClient(cc grpc.ClientConnInterface) VPNClient {
	return &vPNClient{cc}
}

func (c *vPNClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/vpn.VPN/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (VPN_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VPN_serviceDesc.Streams[0], "/vpn.VPN/Exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &vPNExchangeClient{stream}
	return x, nil
}

type VPN_ExchangeClient interface {
	Send(*IPPacket) error
	Recv() (*IPPacket, error)
	grpc.ClientStream
}

type vPNExchangeClient struct {
	grpc.ClientStream
}

func (x *vPNExchangeClient) Send(m *IPPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vPNExchangeClient) Recv() (*IPPacket, error) {
	m := new(IPPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VPNServer is the server API for VPN service.
type VPNServer interface {
	// authentication
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	// exchange packets
	Exchange(VPN_ExchangeServer) error
}

// UnimplementedVPNServer can be embedded to have forward compatible implementations.
type UnimplementedVPNServer struct {
}

func (*UnimplementedVPNServer) Auth(ctx context.Context, req *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedVPNServer) Exchange(srv VPN_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}

func RegisterVPNServer(s *grpc.Server, srv VPNServer) {
	s.RegisterService(&_VPN_serviceDesc, srv)
}

func _VPN_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpn.VPN/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPN_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VPNServer).Exchange(&vPNExchangeServer{stream})
}

type VPN_ExchangeServer interface {
	Send(*IPPacket) error
	Recv() (*IPPacket, error)
	grpc.ServerStream
}

type vPNExchangeServer struct {
	grpc.ServerStream
}

func (x *vPNExchangeServer) Send(m *IPPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vPNExchangeServer) Recv() (*IPPacket, error) {
	m := new(IPPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VPN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpn.VPN",
	HandlerType: (*VPNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _VPN_Auth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _VPN_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vpn.proto",
}
