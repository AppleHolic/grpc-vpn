// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: vpn.proto

package vpn

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_vpn_proto protoreflect.FileDescriptor

var file_vpn_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x70, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x76, 0x70, 0x6e,
	0x1a, 0x10, 0x76, 0x70, 0x6e, 0x2d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x64, 0x0a, 0x03, 0x56, 0x50, 0x4e, 0x12, 0x2d, 0x0a, 0x04, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x49, 0x50, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x49, 0x50, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_vpn_proto_goTypes = []interface{}{
	(*AuthRequest)(nil),  // 0: vpn.AuthRequest
	(*IPPacket)(nil),     // 1: vpn.IPPacket
	(*AuthResponse)(nil), // 2: vpn.AuthResponse
}
var file_vpn_proto_depIdxs = []int32{
	0, // 0: vpn.VPN.Auth:input_type -> vpn.AuthRequest
	1, // 1: vpn.VPN.Exchange:input_type -> vpn.IPPacket
	2, // 2: vpn.VPN.Auth:output_type -> vpn.AuthResponse
	1, // 3: vpn.VPN.Exchange:output_type -> vpn.IPPacket
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_vpn_proto_init() }
func file_vpn_proto_init() {
	if File_vpn_proto != nil {
		return
	}
	file_vpn_struct_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vpn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vpn_proto_goTypes,
		DependencyIndexes: file_vpn_proto_depIdxs,
	}.Build()
	File_vpn_proto = out.File
	file_vpn_proto_rawDesc = nil
	file_vpn_proto_goTypes = nil
	file_vpn_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VPNClient is the client API for VPN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VPNClient interface {
	// authentication
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// exchange packets
	Exchange(ctx context.Context, opts ...grpc.CallOption) (VPN_ExchangeClient, error)
}

type vPNClient struct {
	cc grpc.ClientConnInterface
}

func NewVPNClient(cc grpc.ClientConnInterface) VPNClient {
	return &vPNClient{cc}
}

func (c *vPNClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/vpn.VPN/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (VPN_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VPN_serviceDesc.Streams[0], "/vpn.VPN/Exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &vPNExchangeClient{stream}
	return x, nil
}

type VPN_ExchangeClient interface {
	Send(*IPPacket) error
	Recv() (*IPPacket, error)
	grpc.ClientStream
}

type vPNExchangeClient struct {
	grpc.ClientStream
}

func (x *vPNExchangeClient) Send(m *IPPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vPNExchangeClient) Recv() (*IPPacket, error) {
	m := new(IPPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VPNServer is the server API for VPN service.
type VPNServer interface {
	// authentication
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	// exchange packets
	Exchange(VPN_ExchangeServer) error
}

// UnimplementedVPNServer can be embedded to have forward compatible implementations.
type UnimplementedVPNServer struct {
}

func (*UnimplementedVPNServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedVPNServer) Exchange(VPN_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}

func RegisterVPNServer(s *grpc.Server, srv VPNServer) {
	s.RegisterService(&_VPN_serviceDesc, srv)
}

func _VPN_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpn.VPN/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPN_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VPNServer).Exchange(&vPNExchangeServer{stream})
}

type VPN_ExchangeServer interface {
	Send(*IPPacket) error
	Recv() (*IPPacket, error)
	grpc.ServerStream
}

type vPNExchangeServer struct {
	grpc.ServerStream
}

func (x *vPNExchangeServer) Send(m *IPPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vPNExchangeServer) Recv() (*IPPacket, error) {
	m := new(IPPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VPN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpn.VPN",
	HandlerType: (*VPNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _VPN_Auth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _VPN_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vpn.proto",
}
